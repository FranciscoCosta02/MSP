/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * MyClinic API
 * This API exposes endpoints to manage a clinic.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddAppointmentDTO
 */
export interface AddAppointmentDTO {
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    doctorUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    regime: AddAppointmentDTO.RegimeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    scheduleType: AddAppointmentDTO.ScheduleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddAppointmentDTO
     */
    type: AddAppointmentDTO.TypeEnum;
}

/**
 * @export
 * @namespace AddAppointmentDTO
 */
export namespace AddAppointmentDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum RegimeEnum {
        INPERSON = <any> 'IN_PERSON',
        ONLINE = <any> 'ONLINE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ScheduleTypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        GENFAM = <any> 'GEN_FAM',
        PEDI = <any> 'PEDI',
        GYNEOBST = <any> 'GYNE_OBST',
        CARDIO = <any> 'CARDIO',
        ORTHO = <any> 'ORTHO',
        DERMA = <any> 'DERMA',
        PSYCH = <any> 'PSYCH',
        OPHTHAL = <any> 'OPHTHAL',
        ENT = <any> 'ENT',
        GASTRO = <any> 'GASTRO'
    }
}
/**
 * 
 * @export
 * @interface AddExamDTO
 */
export interface AddExamDTO {
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    doctorUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    equipment: string;
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    scheduleType: AddExamDTO.ScheduleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddExamDTO
     */
    type: AddExamDTO.TypeEnum;
}

/**
 * @export
 * @namespace AddExamDTO
 */
export namespace AddExamDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum ScheduleTypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        GENFAM = <any> 'GEN_FAM',
        PEDI = <any> 'PEDI',
        GYNEOBST = <any> 'GYNE_OBST',
        CARDIO = <any> 'CARDIO',
        ORTHO = <any> 'ORTHO',
        DERMA = <any> 'DERMA',
        PSYCH = <any> 'PSYCH',
        OPHTHAL = <any> 'OPHTHAL',
        ENT = <any> 'ENT',
        GASTRO = <any> 'GASTRO'
    }
}
/**
 * 
 * @export
 * @interface ClientDTO
 */
export interface ClientDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    nif: string;
    /**
     * 
     * @type {MedicalHistoryDTO}
     * @memberof ClientDTO
     */
    medicalHistoryDTO: MedicalHistoryDTO;
    /**
     * 
     * @type {HouseholdDTO}
     * @memberof ClientDTO
     */
    householdDTO: HouseholdDTO;
}
/**
 * 
 * @export
 * @interface ClientShortDTO
 */
export interface ClientShortDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientShortDTO
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ClientShortDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ClientShortDTO
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface DoctorDTO
 */
export interface DoctorDTO {
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorDTO
     */
    speciality: DoctorDTO.SpecialityEnum;
}

/**
 * @export
 * @namespace DoctorDTO
 */
export namespace DoctorDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum SpecialityEnum {
        GENFAM = <any> 'GEN_FAM',
        PEDI = <any> 'PEDI',
        GYNEOBST = <any> 'GYNE_OBST',
        CARDIO = <any> 'CARDIO',
        ORTHO = <any> 'ORTHO',
        DERMA = <any> 'DERMA',
        PSYCH = <any> 'PSYCH',
        OPHTHAL = <any> 'OPHTHAL',
        ENT = <any> 'ENT',
        GASTRO = <any> 'GASTRO'
    }
}
/**
 * 
 * @export
 * @interface DoctorShortDTO
 */
export interface DoctorShortDTO {
    /**
     * 
     * @type {string}
     * @memberof DoctorShortDTO
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorShortDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorShortDTO
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorShortDTO
     */
    speciality: DoctorShortDTO.SpecialityEnum;
}

/**
 * @export
 * @namespace DoctorShortDTO
 */
export namespace DoctorShortDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum SpecialityEnum {
        GENFAM = <any> 'GEN_FAM',
        PEDI = <any> 'PEDI',
        GYNEOBST = <any> 'GYNE_OBST',
        CARDIO = <any> 'CARDIO',
        ORTHO = <any> 'ORTHO',
        DERMA = <any> 'DERMA',
        PSYCH = <any> 'PSYCH',
        OPHTHAL = <any> 'OPHTHAL',
        ENT = <any> 'ENT',
        GASTRO = <any> 'GASTRO'
    }
}
/**
 * 
 * @export
 * @interface HouseholdDTO
 */
export interface HouseholdDTO {
    /**
     * 
     * @type {number}
     * @memberof HouseholdDTO
     */
    id: number;
    /**
     * 
     * @type {Array<ClientShortDTO>}
     * @memberof HouseholdDTO
     */
    clients: Array<ClientShortDTO>;
}
/**
 * 
 * @export
 * @interface MedicalHistoryDTO
 */
export interface MedicalHistoryDTO {
    /**
     * 
     * @type {number}
     * @memberof MedicalHistoryDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalHistoryDTO
     */
    clientUsername: string;
    /**
     * 
     * @type {Array<ScheduleDTO>}
     * @memberof MedicalHistoryDTO
     */
    appointments: Array<ScheduleDTO>;
    /**
     * 
     * @type {Array<ScheduleDTO>}
     * @memberof MedicalHistoryDTO
     */
    exams: Array<ScheduleDTO>;
    /**
     * 
     * @type {Array<PrescriptionDTO>}
     * @memberof MedicalHistoryDTO
     */
    prescriptions: Array<PrescriptionDTO>;
}
/**
 * 
 * @export
 * @interface PrescriptionDTO
 */
export interface PrescriptionDTO {
    /**
     * 
     * @type {number}
     * @memberof PrescriptionDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PrescriptionDTO
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof PrescriptionDTO
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof PrescriptionDTO
     */
    doctorUsername: string;
}
/**
 * 
 * @export
 * @interface ScheduleDTO
 */
export interface ScheduleDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleDTO
     */
    id: number;
    /**
     * 
     * @type {ClientShortDTO}
     * @memberof ScheduleDTO
     */
    client: ClientShortDTO;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    doctor: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    state: ScheduleDTO.StateEnum;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    scheduleType: ScheduleDTO.ScheduleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    type: ScheduleDTO.TypeEnum;
}

/**
 * @export
 * @namespace ScheduleDTO
 */
export namespace ScheduleDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        SCHEDULED = <any> 'SCHEDULED',
        READY = <any> 'READY',
        COMPLETED = <any> 'COMPLETED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ScheduleTypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        GENFAM = <any> 'GEN_FAM',
        PEDI = <any> 'PEDI',
        GYNEOBST = <any> 'GYNE_OBST',
        CARDIO = <any> 'CARDIO',
        ORTHO = <any> 'ORTHO',
        DERMA = <any> 'DERMA',
        PSYCH = <any> 'PSYCH',
        OPHTHAL = <any> 'OPHTHAL',
        ENT = <any> 'ENT',
        GASTRO = <any> 'GASTRO'
    }
}
/**
 * ClientsApi - fetch parameter creator
 * @export
 */
export const ClientsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: ClientDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addClient.');
            }
            const localVarPath = `/api/clients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ClientDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClient.');
            }
            const localVarPath = `/api/clients/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendDoctors(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getRecommendDoctors.');
            }
            const localVarPath = `/api/clients/{username}/doctors/recommended`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: ClientDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).addClient(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientShortDTO> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).getClient(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendDoctors(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DoctorShortDTO>> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).getRecommendDoctors(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ClientDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: ClientDTO, options?: any) {
            return ClientsApiFp(configuration).addClient(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options?: any) {
            return ClientsApiFp(configuration).getClient(username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendDoctors(username: string, options?: any) {
            return ClientsApiFp(configuration).getRecommendDoctors(username, options)(fetch, basePath);
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @param {ClientDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public addClient(body: ClientDTO, options?: any) {
        return ClientsApiFp(this.configuration).addClient(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClient(username: string, options?: any) {
        return ClientsApiFp(this.configuration).getClient(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getRecommendDoctors(username: string, options?: any) {
        return ClientsApiFp(this.configuration).getRecommendDoctors(username, options)(this.fetch, this.basePath);
    }

}
/**
 * DoctorsApi - fetch parameter creator
 * @export
 */
export const DoctorsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DoctorDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDoctor(body: DoctorDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addDoctor.');
            }
            const localVarPath = `/api/doctors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DoctorDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctors(options: any = {}): FetchArgs {
            const localVarPath = `/api/doctors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorsApi - functional programming interface
 * @export
 */
export const DoctorsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DoctorDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDoctor(body: DoctorDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DoctorsApiFetchParamCreator(configuration).addDoctor(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctors(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DoctorShortDTO>> {
            const localVarFetchArgs = DoctorsApiFetchParamCreator(configuration).getDoctors(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DoctorsApi - factory interface
 * @export
 */
export const DoctorsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {DoctorDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDoctor(body: DoctorDTO, options?: any) {
            return DoctorsApiFp(configuration).addDoctor(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctors(options?: any) {
            return DoctorsApiFp(configuration).getDoctors(options)(fetch, basePath);
        },
    };
};

/**
 * DoctorsApi - object-oriented interface
 * @export
 * @class DoctorsApi
 * @extends {BaseAPI}
 */
export class DoctorsApi extends BaseAPI {
    /**
     * 
     * @param {DoctorDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public addDoctor(body: DoctorDTO, options?: any) {
        return DoctorsApiFp(this.configuration).addDoctor(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public getDoctors(options?: any) {
        return DoctorsApiFp(this.configuration).getDoctors(options)(this.fetch, this.basePath);
    }

}
/**
 * HouseholdApi - fetch parameter creator
 * @export
 */
export const HouseholdApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientHousehold(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientHousehold.');
            }
            const localVarPath = `/api/clients/{username}/household`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HouseholdApi - functional programming interface
 * @export
 */
export const HouseholdApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientHousehold(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HouseholdDTO> {
            const localVarFetchArgs = HouseholdApiFetchParamCreator(configuration).getClientHousehold(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HouseholdApi - factory interface
 * @export
 */
export const HouseholdApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientHousehold(username: string, options?: any) {
            return HouseholdApiFp(configuration).getClientHousehold(username, options)(fetch, basePath);
        },
    };
};

/**
 * HouseholdApi - object-oriented interface
 * @export
 * @class HouseholdApi
 * @extends {BaseAPI}
 */
export class HouseholdApi extends BaseAPI {
    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdApi
     */
    public getClientHousehold(username: string, options?: any) {
        return HouseholdApiFp(this.configuration).getClientHousehold(username, options)(this.fetch, this.basePath);
    }

}
/**
 * MedicalHistoryApi - fetch parameter creator
 * @export
 */
export const MedicalHistoryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientMedicalHistory(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientMedicalHistory.');
            }
            const localVarPath = `/api/clients/{username}/medical_history`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicalHistoryApi - functional programming interface
 * @export
 */
export const MedicalHistoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientMedicalHistory(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MedicalHistoryDTO> {
            const localVarFetchArgs = MedicalHistoryApiFetchParamCreator(configuration).getClientMedicalHistory(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MedicalHistoryApi - factory interface
 * @export
 */
export const MedicalHistoryApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientMedicalHistory(username: string, options?: any) {
            return MedicalHistoryApiFp(configuration).getClientMedicalHistory(username, options)(fetch, basePath);
        },
    };
};

/**
 * MedicalHistoryApi - object-oriented interface
 * @export
 * @class MedicalHistoryApi
 * @extends {BaseAPI}
 */
export class MedicalHistoryApi extends BaseAPI {
    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalHistoryApi
     */
    public getClientMedicalHistory(username: string, options?: any) {
        return MedicalHistoryApiFp(this.configuration).getClientMedicalHistory(username, options)(this.fetch, this.basePath);
    }

}
/**
 * PrescriptionApi - fetch parameter creator
 * @export
 */
export const PrescriptionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientPrescriptions(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientPrescriptions.');
            }
            const localVarPath = `/api/clients/{username}/prescriptions`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrescriptionApi - functional programming interface
 * @export
 */
export const PrescriptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientPrescriptions(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PrescriptionDTO>> {
            const localVarFetchArgs = PrescriptionApiFetchParamCreator(configuration).getClientPrescriptions(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PrescriptionApi - factory interface
 * @export
 */
export const PrescriptionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientPrescriptions(username: string, options?: any) {
            return PrescriptionApiFp(configuration).getClientPrescriptions(username, options)(fetch, basePath);
        },
    };
};

/**
 * PrescriptionApi - object-oriented interface
 * @export
 * @class PrescriptionApi
 * @extends {BaseAPI}
 */
export class PrescriptionApi extends BaseAPI {
    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionApi
     */
    public getClientPrescriptions(username: string, options?: any) {
        return PrescriptionApiFp(this.configuration).getClientPrescriptions(username, options)(this.fetch, this.basePath);
    }

}
/**
 * ScheduleApi - fetch parameter creator
 * @export
 */
export const ScheduleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddAppointmentDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AddAppointmentDTO, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addAppointment.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling addAppointment.');
            }
            const localVarPath = `/api/clients/{username}/appointments`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddAppointmentDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddExamDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: AddExamDTO, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addExam.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling addExam.');
            }
            const localVarPath = `/api/clients/{username}/exams`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddExamDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling checkIn.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling checkIn.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkIn.');
            }
            const localVarPath = `/api/clients/{username}/schedule/{type}/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientSchedule.');
            }
            const localVarPath = `/api/clients/{username}/schedule`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddAppointmentDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AddAppointmentDTO, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).addAppointment(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {AddExamDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: AddExamDTO, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).addExam(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).checkIn(username, type, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ScheduleDTO>> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).getClientSchedule(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {AddAppointmentDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AddAppointmentDTO, username: string, options?: any) {
            return ScheduleApiFp(configuration).addAppointment(body, username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {AddExamDTO} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: AddExamDTO, username: string, options?: any) {
            return ScheduleApiFp(configuration).addExam(body, username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options?: any) {
            return ScheduleApiFp(configuration).checkIn(username, type, id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options?: any) {
            return ScheduleApiFp(configuration).getClientSchedule(username, options)(fetch, basePath);
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @param {AddAppointmentDTO} body 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public addAppointment(body: AddAppointmentDTO, username: string, options?: any) {
        return ScheduleApiFp(this.configuration).addAppointment(body, username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {AddExamDTO} body 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public addExam(body: AddExamDTO, username: string, options?: any) {
        return ScheduleApiFp(this.configuration).addExam(body, username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {string} type 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public checkIn(username: string, type: string, id: number, options?: any) {
        return ScheduleApiFp(this.configuration).checkIn(username, type, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public getClientSchedule(username: string, options?: any) {
        return ScheduleApiFp(this.configuration).getClientSchedule(username, options)(this.fetch, this.basePath);
    }

}
