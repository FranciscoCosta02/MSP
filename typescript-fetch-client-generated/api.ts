/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * MyClinic API
 * This API exposes endpoints to manage a clinic.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Appointment associated to a client and doctor
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    id: number;
    /**
     * 
     * @type {ShortClient}
     * @memberof Appointment
     */
    client: ShortClient;
    /**
     * 
     * @type {ShortDoctor}
     * @memberof Appointment
     */
    doctor: ShortDoctor;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    state: Appointment.StateEnum;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    regime: Appointment.RegimeEnum;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    type: Appointment.TypeEnum;
}

/**
 * @export
 * @namespace Appointment
 */
export namespace Appointment {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        SCHEDULED = <any> 'SCHEDULED',
        READY = <any> 'READY',
        COMPLETED = <any> 'COMPLETED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RegimeEnum {
        INPERSON = <any> 'IN_PERSON',
        ONLINE = <any> 'ONLINE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
}
/**
 * Appointment to register
 * @export
 * @interface AppointmentToAdd
 */
export interface AppointmentToAdd {
    /**
     * 
     * @type {string}
     * @memberof AppointmentToAdd
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentToAdd
     */
    doctorUsername: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentToAdd
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentToAdd
     */
    regime: AppointmentToAdd.RegimeEnum;
    /**
     * 
     * @type {string}
     * @memberof AppointmentToAdd
     */
    type: AppointmentToAdd.TypeEnum;
}

/**
 * @export
 * @namespace AppointmentToAdd
 */
export namespace AppointmentToAdd {
    /**
     * @export
     * @enum {string}
     */
    export enum RegimeEnum {
        INPERSON = <any> 'IN_PERSON',
        ONLINE = <any> 'ONLINE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
}
/**
 * Original version of client
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    nif: string;
    /**
     * 
     * @type {MedicalHistory}
     * @memberof Client
     */
    medicalHistoryDTO: MedicalHistory;
    /**
     * 
     * @type {Household}
     * @memberof Client
     */
    householdDTO: Household;
}
/**
 * Exam associated to a client and doctor
 * @export
 * @interface Exam
 */
export interface Exam {
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    id: number;
    /**
     * 
     * @type {ShortClient}
     * @memberof Exam
     */
    client: ShortClient;
    /**
     * 
     * @type {ShortDoctor}
     * @memberof Exam
     */
    doctor: ShortDoctor;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    state: Exam.StateEnum;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    equipment: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    type: Exam.TypeEnum;
}

/**
 * @export
 * @namespace Exam
 */
export namespace Exam {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        SCHEDULED = <any> 'SCHEDULED',
        READY = <any> 'READY',
        COMPLETED = <any> 'COMPLETED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
}
/**
 * Exam to register
 * @export
 * @interface ExamToAdd
 */
export interface ExamToAdd {
    /**
     * 
     * @type {string}
     * @memberof ExamToAdd
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof ExamToAdd
     */
    doctorUsername: string;
    /**
     * 
     * @type {string}
     * @memberof ExamToAdd
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof ExamToAdd
     */
    equipment: string;
    /**
     * 
     * @type {string}
     * @memberof ExamToAdd
     */
    type: ExamToAdd.TypeEnum;
}

/**
 * @export
 * @namespace ExamToAdd
 */
export namespace ExamToAdd {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
}
/**
 * Original version of household
 * @export
 * @interface Household
 */
export interface Household {
    /**
     * 
     * @type {number}
     * @memberof Household
     */
    id: number;
    /**
     * 
     * @type {Array<ShortClient>}
     * @memberof Household
     */
    clients: Array<ShortClient>;
}
/**
 * Original version of medical history
 * @export
 * @interface MedicalHistory
 */
export interface MedicalHistory {
    /**
     * 
     * @type {number}
     * @memberof MedicalHistory
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalHistory
     */
    clientUsername: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MedicalHistory
     */
    doctorUsernames: Array<string>;
    /**
     * 
     * @type {Array<Appointment>}
     * @memberof MedicalHistory
     */
    appointments: Array<Appointment>;
    /**
     * 
     * @type {Array<Exam>}
     * @memberof MedicalHistory
     */
    exams: Array<Exam>;
    /**
     * 
     * @type {Array<Prescription>}
     * @memberof MedicalHistory
     */
    prescriptions: Array<Prescription>;
}
/**
 * Original version of prescription
 * @export
 * @interface Prescription
 */
export interface Prescription {
    /**
     * 
     * @type {number}
     * @memberof Prescription
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    clientUsername: string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    doctorUsername: string;
}
/**
 * Original version of schedule
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    id: number;
    /**
     * 
     * @type {ShortClient}
     * @memberof Schedule
     */
    client: ShortClient;
    /**
     * 
     * @type {ShortDoctor}
     * @memberof Schedule
     */
    doctor: ShortDoctor;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    state: Schedule.StateEnum;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    type: Schedule.TypeEnum;
}

/**
 * @export
 * @namespace Schedule
 */
export namespace Schedule {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        SCHEDULED = <any> 'SCHEDULED',
        READY = <any> 'READY',
        COMPLETED = <any> 'COMPLETED'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        APPOINTMENT = <any> 'APPOINTMENT',
        EXAM = <any> 'EXAM'
    }
}
/**
 * Short version of client
 * @export
 * @interface ShortClient
 */
export interface ShortClient {
    /**
     * 
     * @type {string}
     * @memberof ShortClient
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ShortClient
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ShortClient
     */
    phone: string;
}
/**
 * Short version of doctor
 * @export
 * @interface ShortDoctor
 */
export interface ShortDoctor {
    /**
     * 
     * @type {string}
     * @memberof ShortDoctor
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ShortDoctor
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ShortDoctor
     */
    phone: string;
}
/**
 * ClientsApi - fetch parameter creator
 * @export
 */
export const ClientsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds a client
         * @param {Client} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: Client, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addClient.');
            }
            const localVarPath = `/api/clients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Client" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClient.');
            }
            const localVarPath = `/api/clients/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds a client
         * @param {Client} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: Client, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).addClient(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ShortClient> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).getClient(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Adds a client
         * @param {Client} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClient(body: Client, options?: any) {
            return ClientsApiFp(configuration).addClient(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: string, options?: any) {
            return ClientsApiFp(configuration).getClient(username, options)(fetch, basePath);
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Adds a client
     * @param {Client} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public addClient(body: Client, options?: any) {
        return ClientsApiFp(this.configuration).addClient(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClient(username: string, options?: any) {
        return ClientsApiFp(this.configuration).getClient(username, options)(this.fetch, this.basePath);
    }

}
/**
 * ScheduleApi - fetch parameter creator
 * @export
 */
export const ScheduleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AppointmentToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AppointmentToAdd, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addAppointment.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling addAppointment.');
            }
            const localVarPath = `/api/clients/{username}/appointments`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AppointmentToAdd" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExamToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: ExamToAdd, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addExam.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling addExam.');
            }
            const localVarPath = `/api/clients/{username}/exams`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExamToAdd" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling checkIn.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling checkIn.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkIn.');
            }
            const localVarPath = `/api/clients/{username}/schedule/{type}/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientSchedule.');
            }
            const localVarPath = `/api/clients/{username}/schedule`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AppointmentToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AppointmentToAdd, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).addAppointment(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ExamToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: ExamToAdd, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).addExam(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).checkIn(username, type, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Schedule>> {
            const localVarFetchArgs = ScheduleApiFetchParamCreator(configuration).getClientSchedule(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {AppointmentToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointment(body: AppointmentToAdd, username: string, options?: any) {
            return ScheduleApiFp(configuration).addAppointment(body, username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ExamToAdd} body 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExam(body: ExamToAdd, username: string, options?: any) {
            return ScheduleApiFp(configuration).addExam(body, username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {string} type 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: string, type: string, id: number, options?: any) {
            return ScheduleApiFp(configuration).checkIn(username, type, id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedule(username: string, options?: any) {
            return ScheduleApiFp(configuration).getClientSchedule(username, options)(fetch, basePath);
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @param {AppointmentToAdd} body 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public addAppointment(body: AppointmentToAdd, username: string, options?: any) {
        return ScheduleApiFp(this.configuration).addAppointment(body, username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ExamToAdd} body 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public addExam(body: ExamToAdd, username: string, options?: any) {
        return ScheduleApiFp(this.configuration).addExam(body, username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {string} type 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public checkIn(username: string, type: string, id: number, options?: any) {
        return ScheduleApiFp(this.configuration).checkIn(username, type, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public getClientSchedule(username: string, options?: any) {
        return ScheduleApiFp(this.configuration).getClientSchedule(username, options)(this.fetch, this.basePath);
    }

}
